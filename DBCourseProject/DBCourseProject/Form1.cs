using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using System.Data.SqlClient;
using Microsoft.Office.Interop.Excel;

namespace DBCourseProject
{
    public partial class Form1 : Form
    {
        const string ConnectionString = "Data Source=(localdb)\\v11.0;Initial Catalog=Cars;Integrated Security=True";
        private int[] array = {3, 0, 1, 3, 9, 1, 0, 0, 0, 0, 0, 0};

        AddCar addCar_form;
        AddConsultant addConsultant_form;
        AddCustomer addCustomer_form;
        AddContract addContract_form;
        SQL_QueryForm sqlQuery_form;
        CarContext _context;

        public Form1()
        {
            InitializeComponent();

        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            _context = new CarContext();

            // Call the Load method to get the data for the given DbSet  
            // from the database.  
            // The data is materialized as entities. The entities are managed by  
            // the DbContext instance.  
            _context.Cars.Load();
            _context.Customers.Load();
            _context.Consultants.Load();

            // Bind the categoryBindingSource.DataSource to  
            // all the Unchanged, Modified and Added Category objects that  
            // are currently tracked by the DbContext. 
            // Note that we need to call ToBindingList() on the  
            // ObservableCollection<TEntity> returned by 
            // the DbSet.Local property to get the BindingList<T> 
            // in order to facilitate two-way binding in WinForms. 
            this.carBindingSource.DataSource =
                _context.Cars.Local.ToBindingList();
            this.consultantBindingSource.DataSource =
                _context.Consultants.Local.ToBindingList();
            this.customerBindingSource.DataSource =
                _context.Customers.Local.ToBindingList();
            //CheckDateCustomerRights();
            //CheckCar();
            
        }

        private void categoryBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities  
            // that are removed from a navigation property (in our example the Products) 
            // as deleted in the context.  
            // The following code uses LINQ to Objects against the Local collection  
            // to find all products and marks any that do not have 
            // a Category reference as deleted.  
            // The ToList call is required because otherwise  
            // the collection will be modified  
            // by the Remove call while it is being enumerated.  
            // In most other situations you can do LINQ to Objects directly  
            // against the Local property without using ToList first. 
            foreach (var product in _context.Cars.Local.ToList())
            {
                if (product.Contracts == null)
                {
                    _context.Cars.Remove(product);
                }
            }

            // Save the changes to the database. 
            this._context.SaveChanges();

            // Refresh the controls to show the values          
            // that were generated by the database. 
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            this.Validate();
            this._context.SaveChanges();
            base.OnClosing(e);
            this._context.Dispose();
        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {

        }

        private void автомобильToolStripMenuItem_Click(object sender, EventArgs e)
        {
            addCar_form = new AddCar(this);
            if (addCar_form.ShowDialog() == DialogResult.OK)
            {
                
            }
        }

        private void консультантToolStripMenuItem_Click(object sender, EventArgs e)
        {
            addConsultant_form = new AddConsultant(this);
            if (addConsultant_form.ShowDialog() == DialogResult.OK)
            {

            }
        }

        private void клиентToolStripMenuItem_Click(object sender, EventArgs e)
        {
            addCustomer_form = new AddCustomer(this);
            if (addCustomer_form.ShowDialog() == DialogResult.OK)
            {

            }
        }

        private void контрактToolStripMenuItem_Click(object sender, EventArgs e)
        {
            addContract_form = new AddContract(this);
            if (addContract_form.ShowDialog() == DialogResult.OK)
            {

            }
        }

        public void AddCarToDatagrid(string carName, string model, string color, int mileage, int rentalFees, int capacity)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                 sqlconn.Open();
                 string query = @"INSERT INTO Cars(CarName, Model, Color, Mileage, RentalFees, Capacity) VALUES(" + "N\'" + carName + "\'"
                     + ", " + "N\'" + model + "\'" + ", " + "N\'" + color + "\'" + ", " + mileage + 
                     ", " + rentalFees + ", " + capacity + ")";
                 SqlDataAdapter oda = new SqlDataAdapter(query, sqlconn);
                 System.Data.DataTable dt = new System.Data.DataTable();
                 oda = new SqlDataAdapter(query, sqlconn);
                 oda.Fill(dt);
                 sqlconn.Close();
                 _context = new CarContext();
                 _context.Cars.Load();
                 this.carBindingSource.DataSource =
                 _context.Cars.Local.ToBindingList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
            
        }

        public void AddConsultantToDatagrid(string consultantName, string numberTel, string address, int experience, string merit)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string query;
                SqlDataAdapter oda;
                query = @"INSERT INTO Consultants(ConsultantName, NumberTel, Address, Experience, Merit) VALUES(" + "N\'" + consultantName + "\'"
                    + ", " + "\'" + numberTel + "\'" + ", " + "N\'" + address + "\'" + ", " + experience +
                    ", " + "N\'" + merit + "\'" + ")";
                oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda = new SqlDataAdapter(query, sqlconn);
                oda.Fill(dt);
                sqlconn.Close();
                _context = new CarContext();
                _context.Consultants.Load();
                this.consultantBindingSource.DataSource =
                _context.Consultants.Local.ToBindingList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
        }

        public void AddCustomerToDatagrid(string customerName, string numberTel, string address, string creditCard, string issuanceRights, string characteristics)
        {
            string issuanceR = "20150530";
            DateTime dateIssuanceR;
            StringBuilder resString = new StringBuilder();
            try
            {
                dateIssuanceR = DateTime.Parse(issuanceRights);
                resString.Append(dateIssuanceR.Year);
                if (dateIssuanceR.Month < 10)
                {
                    resString.Append(0);
                }
                resString.Append(dateIssuanceR.Month);
                if (dateIssuanceR.Day < 10)
                {
                    resString.Append(0);
                }
                resString.Append(dateIssuanceR.Day);
                issuanceR = resString.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string query;
                SqlDataAdapter oda;
                query = @"INSERT INTO Customers(CustomerName, NumberTel, Address, CreditCardNumber, DateIssuanceRights, Characteristics) VALUES(" 
                    + "N\'" + customerName + "\'" + ", " + "\'" + numberTel + "\'" + ", " + "N\'" + address + "\'" + ", "
                    + "\'" + creditCard + "\'" + ", " + "\'" + issuanceR + "\'" + ", " + "N\'" + characteristics + "\'" + ")";
                oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda.Fill(dt);
                sqlconn.Close();
                _context = new CarContext();
                _context.Customers.Load();
                this.customerBindingSource.DataSource =
                _context.Customers.Local.ToBindingList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
        }

        public void AddContractToDatagrid(int customerId, int carId, int consultantId, string notes, string expiryDateLease, string dateDrawingContract)
        {
            string expiryDate = "20150530";
            string dateDrawing = "20150530";
            DateTime dateContract;
            DateTime dateContractDrawing;
            StringBuilder resStringExpiry = new StringBuilder();
            StringBuilder resStringDrawing = new StringBuilder();
            try
            {
                dateContract = DateTime.Parse(expiryDateLease);
                resStringExpiry.Append(dateContract.Year);
                if (dateContract.Month < 10)
                {
                    resStringExpiry.Append(0);
                }
                resStringExpiry.Append(dateContract.Month);
                array[dateContract.Month]++;
                if (dateContract.Day < 10)
                {
                    resStringExpiry.Append(0);
                }
                resStringExpiry.Append(dateContract.Day);
                expiryDate = resStringExpiry.ToString();
                dateContractDrawing = DateTime.Parse(dateDrawingContract);
                resStringDrawing.Append(dateContractDrawing.Year);
                if (dateContract.Month < 10)
                {
                    resStringDrawing.Append(0);
                }
                resStringDrawing.Append(dateContractDrawing.Month);
                if (dateContract.Day < 10)
                {
                    resStringDrawing.Append(0);
                }
                resStringDrawing.Append(dateContractDrawing.Day);
                dateDrawing = resStringDrawing.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string query;
                SqlDataAdapter oda;
                query = @"INSERT INTO Contracts(CustomerID, CarID, ConsultantID, Notres, ExpiryDateLease, DateDrawingContract) VALUES(" 
                    + customerId + ", " + carId + ", " + consultantId + ", " + "N\'" + notes + "\'" +
                    ", " + "\'" + expiryDate + "\'" + ", " + "\'" + dateDrawing + "\'" + ")";
                oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda.Fill(dt);
                sqlconn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }

        }

        private void search_button_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < carDataGridView.RowCount; i++)
            {
                carDataGridView.Rows[i].Selected = false;
                for (int j = 0; j < carDataGridView.ColumnCount; j++)
                    if (carDataGridView.Rows[i].Cells[j].Value != null)
                        if (carDataGridView.Rows[i].Cells[j].Value.ToString().Contains(search_textBox.Text))
                        {
                            carDataGridView.Rows[i].Selected = true;
                            break;
                        }
            }
        }

        private void delete_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (carDataGridView.SelectedCells != null)
                {
                    int ind = carDataGridView.SelectedCells[0].RowIndex;
                    carDataGridView.Rows.RemoveAt(ind);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void filter_button_Click(object sender, EventArgs e)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string filt = filter_comboBox.Text;
                string param = filter_textBox.Text;
                string query;
                switch (filt)
                {
                    case ("№ Автомобиля"):
                        query = "SELECT * FROM Cars WHERE CarId = " + param;
                        break;
                    case ("Марка"):
                        query = @"SELECT * FROM Cars WHERE CarName LIKE N" + "'" + param + "'";
                        break;
                    case ("Модель"):
                        query = @"SELECT * FROM Cars WHERE Model LIKE N" + "'" + param + "'";
                        break;
                    case ("Цвет"):
                        query = @"SELECT * FROM Cars WHERE Color LIKE N" + "'" + param + "'";
                        break;
                    case ("Пробег"):
                        query = "SELECT * FROM Cars WHERE Mileage = " + param;
                        break;
                    case ("Стоимость проката"):
                        query = "SELECT * FROM Cars WHERE RentalFees = " + param;
                        break;
                    case ("Вместимость"):
                        query = "SELECT * FROM Cars WHERE Capacity = " + param;
                        break;
                    default:
                        query = "SELECT * FROM Cars WHERE CarId = " + 1;
                        break;
                }		

                SqlDataAdapter oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda.Fill(dt);
                carDataGridView.DataSource = dt;
                sqlconn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
        }

        private void clearSelect_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (carDataGridView.SelectedCells != null)
                {
                    int ind = carDataGridView.SelectedCells[0].RowIndex;
                    carDataGridView.Rows.RemoveAt(ind);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void searchCustomer_button_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < customerDataGridView.RowCount; i++)
            {
                customerDataGridView.Rows[i].Selected = false;
                for (int j = 0; j < customerDataGridView.ColumnCount; j++)
                    if (customerDataGridView.Rows[i].Cells[j].Value != null)
                        if (customerDataGridView.Rows[i].Cells[j].Value.ToString().Contains(searchCustomer_textBox.Text))
                        {
                            customerDataGridView.Rows[i].Selected = true;
                            break;
                        }
            }
        }

        private void dleteCustomer_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (customerDataGridView.SelectedCells != null)
                {
                    int ind = customerDataGridView.SelectedCells[0].RowIndex;
                    customerDataGridView.Rows.RemoveAt(ind);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void fliterClient_button_Click(object sender, EventArgs e)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string filt = filterClient_comboBox.Text;
                string param = filterClient_textBox.Text;
                string query;
                string issuanceR = "20150530";
                DateTime dateIssuanceR;
                StringBuilder resString = new StringBuilder();
                switch (filt)
                {
                    case ("№ Клиента"):
                        query = "SELECT * FROM Customers WHERE CustomerId = " + param;
                        break;
                    case ("Имя"):
                        query = @"SELECT * FROM Customers WHERE CustomerName LIKE N" + "'" + param + "'";
                        break;
                    case ("Номер телефона"):
                        query = "SELECT * FROM Customers WHERE NumberTel = " + "'" + param + "'";
                        break;
                    case ("Адрес"):
                        query = @"SELECT * FROM Customers WHERE Address LIKE N" + "'" + param + "'";
                        break;
                    case ("Кредитная карта"):
                        query = "SELECT * FROM Customers WHERE CreditCardNumber = " + "\'" + param + "\'";
                        break;
                    case ("Права"):
                        dateIssuanceR = DateTime.Parse(param);
                        resString.Append(dateIssuanceR.Year);
                        if (dateIssuanceR.Month < 10)
                        {
                            resString.Append(0);
                        }
                        resString.Append(dateIssuanceR.Month).Append(dateIssuanceR.Day);
                        issuanceR = resString.ToString();
                        query = "SELECT * FROM Customers WHERE DateIssuanceRights = " + "\'" + issuanceR + "\'";
                        break;
                    case ("Характеристика"):
                        query = @"SELECT * FROM Customers WHERE Characteristics LIKE N" + "'" + param + "'";
                        break;
                    default:
                        query = "SELECT * FROM Customers WHERE CustomerId = " + 1;
                        break;
                        
                }
                SqlDataAdapter oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda.Fill(dt);
                customerDataGridView.DataSource = dt;
                sqlconn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
        }

        private void searchConsultant_button_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < consultantDataGridView.RowCount; i++)
            {
                consultantDataGridView.Rows[i].Selected = false;
                for (int j = 0; j < consultantDataGridView.ColumnCount; j++)
                    if (consultantDataGridView.Rows[i].Cells[j].Value != null)
                        if (consultantDataGridView.Rows[i].Cells[j].Value.ToString().Contains(searchConsultant_textBox.Text))
                        {
                            consultantDataGridView.Rows[i].Selected = true;
                            break;
                        }
            }
        }

        private void deletaConsultant_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (consultantDataGridView.SelectedCells != null)
                {
                    int ind = consultantDataGridView.SelectedCells[0].RowIndex;
                    consultantDataGridView.Rows.RemoveAt(ind);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void filterConsultant_button_Click(object sender, EventArgs e)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string filt = filterConsultant_comboBox.Text;
                string param = filterConsultant_textBox.Text;
                string query;
                switch (filt)
                {
                    case ("№ Консультанта"):
                        query = "SELECT * FROM Consultants WHERE ConsultantId = " + param;
                        break;
                    case ("Имя"):
                        query = @"SELECT * FROM Consultants WHERE ConsultantName LIKE N" + "'" + param + "'";
                        break;
                    case ("Телефон"):
                        query = "SELECT * FROM Consultants WHERE NumberTel = " + "\'" + param + "\'";
                        break;
                    case ("Адрес"):
                        query = @"SELECT * FROM Consultants WHERE Address LIKE N" + "'" + param + "'";
                        break;
                    case ("Стаж"):
                        query = "SELECT * FROM Consultants WHERE Experience = " + param;
                        break;
                    case ("Характеристика"):
                        query = @"SELECT * FROM Consultants WHERE Merit LIKE N" + "'" + param + "'";
                        break;
                    default:
                        query = "SELECT * FROM Consultants WHERE CustomerId = " + 1;
                        break;

                }
                SqlDataAdapter oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda.Fill(dt);
                consultantDataGridView.DataSource = dt;
                sqlconn.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
        }

        private void updateCar_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (carDataGridView.SelectedCells != null)
                {
                    int ind = carDataGridView.SelectedCells[0].RowIndex;
                    addCar_form = new AddCar(this, 
                        (string)carDataGridView[0, ind].Value.ToString(), 
                        (string)carDataGridView[1, ind].Value,
                        (string)carDataGridView[2, ind].Value, 
                        (string)carDataGridView[3, ind].Value, 
                        (string)carDataGridView[4, ind].Value.ToString(),
                        (string)carDataGridView[5, ind].Value.ToString(), 
                        (string)carDataGridView[6, ind].Value.ToString());
                    if (addCar_form.ShowDialog() == DialogResult.OK)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void UpdateCarDatagrid(string carId, string carName, string model, string color, int mileage, int rentalFees, int capacity)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string query = @"UPDATE Cars SET CarName = " + "N\'" + carName + "\'" + ", Model = " + "N\'" + model + "\'" 
                    + ", Color = " + "N\'" + color + "\'" + ", Mileage = " + mileage + ", RentalFees = " + rentalFees +
                    ", Capacity = " + capacity + " WHERE CarId = " + Convert.ToInt32(carId);
                SqlDataAdapter oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda = new SqlDataAdapter(query, sqlconn);
                oda.Fill(dt);
                sqlconn.Close();
                _context = new CarContext();
                _context.Cars.Load();
                this.carBindingSource.DataSource =
                _context.Cars.Local.ToBindingList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }

        }

        private void updateCustomer_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (customerDataGridView.SelectedCells != null)
                {
                    int ind = customerDataGridView.SelectedCells[0].RowIndex;
                    addCustomer_form = new AddCustomer(this, 
                        (string)customerDataGridView[0, ind].Value.ToString(),
                        (string)customerDataGridView[1, ind].Value,
                        (string)customerDataGridView[2, ind].Value,
                        (string)customerDataGridView[3, ind].Value,
                        (string)customerDataGridView[4, ind].Value.ToString(),
                        (string)customerDataGridView[5, ind].Value.ToString(),
                        (string)customerDataGridView[6, ind].Value.ToString());
                    if (addCustomer_form.ShowDialog() == DialogResult.OK)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void UpdateCustomerDatagrid(string customerId, string customerName, string numberTel, string address,
            string creditCard, string issuanceRights, string characteristics)
        {
            string issuanceR = "20150530";
            DateTime dateIssuanceR;
            StringBuilder resString = new StringBuilder();
            try
            {
                dateIssuanceR = DateTime.Parse(issuanceRights);
                resString.Append(dateIssuanceR.Year);
                if (dateIssuanceR.Month < 10)
                {
                    resString.Append(0);
                }
                resString.Append(dateIssuanceR.Month);
                if (dateIssuanceR.Day < 10)
                {
                    resString.Append(0);
                }
                resString.Append(dateIssuanceR.Day);
                issuanceR = resString.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                StringBuilder query = new StringBuilder();
                SqlDataAdapter oda;
                query.Append(@"UPDATE Customers SET CustomerName = N'").Append(customerName).Append("\', NumberTel = N\'");
                query.Append(numberTel).Append("\', Address = N\'").Append(address).Append("\', CreditCardNumber = N\'").Append(creditCard);
                query.Append("\', DateIssuanceRights = \'").Append(issuanceR).Append("\', Characteristics = N\'");
                query.Append(characteristics).Append("\' WHERE CustomerId = ").Append(Convert.ToInt32(customerId));
                oda = new SqlDataAdapter(query.ToString(), sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda.Fill(dt);
                sqlconn.Close();
                _context = new CarContext();
                _context.Customers.Load();
                this.customerBindingSource.DataSource =
                _context.Customers.Local.ToBindingList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void updateConsultant_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (consultantDataGridView.SelectedCells != null)
                {
                    int ind = consultantDataGridView.SelectedCells[0].RowIndex;
                    addConsultant_form = new AddConsultant(this,
                        (string)consultantDataGridView[0, ind].Value.ToString(),
                        (string)consultantDataGridView[1, ind].Value,
                        (string)consultantDataGridView[2, ind].Value,
                        (string)consultantDataGridView[3, ind].Value,
                        (string)consultantDataGridView[4, ind].Value.ToString(),
                        (string)consultantDataGridView[5, ind].Value.ToString());
                    if (addConsultant_form.ShowDialog() == DialogResult.OK)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public void UpdateConsultantDatagrid(string consultantId, string consultantName, string numberTel, string address,
            int experience, string merit)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                StringBuilder query = new StringBuilder();
                SqlDataAdapter oda;
                query.Append(@"UPDATE Consultants SET ConsultantName = N'").Append(consultantName).Append("\', NumberTel = N\'");
                query.Append(numberTel).Append("\', Address = N\'").Append(address).Append("\', Experience = ").Append(experience);
                query.Append(", Merit = N\'").Append(merit).Append("\' WHERE ConsultantId = ").Append(Convert.ToInt32(consultantId));
                oda = new SqlDataAdapter(query.ToString(), sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda.Fill(dt);
                sqlconn.Close();
                _context = new CarContext();
                _context.Consultants.Load();
                this.consultantBindingSource.DataSource =
                _context.Consultants.Local.ToBindingList();
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }
        }

        private void xmlCar_button_Click(object sender, EventArgs e)
        {
            Microsoft.Office.Interop.Excel.Application ExcelApp = new Microsoft.Office.Interop.Excel.Application();
            ExcelApp.Application.Workbooks.Add(Type.Missing);
            ExcelApp.Columns.ColumnWidth = 20;
            ExcelApp.Cells[1, 1] = "№ Автомобиля";
            ExcelApp.Cells[1, 2] = "Марка";
            ExcelApp.Cells[1, 3] = "Модель";
            ExcelApp.Cells[1, 4] = "Цвет";
            ExcelApp.Cells[1, 5] = "Пробег";
            ExcelApp.Cells[1, 6] = "Стоимость проката";
            ExcelApp.Cells[1, 7] = "Вместимость";

            for (int i = 0; i < carDataGridView.ColumnCount; i++)
            {
                for (int j = 0; j < carDataGridView.RowCount; j++)
                {
                    ExcelApp.Cells[j + 2, i + 1] = (carDataGridView[i, j].Value ?? "").ToString();
                }
            }
            ExcelApp.Visible = true;
        }

        private void xmlCustomer_button_Click(object sender, EventArgs e)
        {
            Microsoft.Office.Interop.Excel.Application ExcelApp = new Microsoft.Office.Interop.Excel.Application();
            ExcelApp.Application.Workbooks.Add(Type.Missing);
            ExcelApp.Columns.ColumnWidth = 20;
            ExcelApp.Cells[1, 1] = "№ Клиента";
            ExcelApp.Cells[1, 2] = "Имя";
            ExcelApp.Cells[1, 3] = "Номер телефона";
            ExcelApp.Cells[1, 4] = "Адрес";
            ExcelApp.Cells[1, 5] = "Номер кредитной карты";
            ExcelApp.Cells[1, 6] = "Права";
            ExcelApp.Cells[1, 7] = "Характеристика";

            for (int i = 0; i < customerDataGridView.ColumnCount; i++)
            {
                for (int j = 0; j < customerDataGridView.RowCount; j++)
                {
                    ExcelApp.Cells[j + 2, i + 1] = (customerDataGridView[i, j].Value ?? "").ToString();
                }
            }
            ExcelApp.Visible = true;
        }

        private void xmlConsultant_button_Click(object sender, EventArgs e)
        {
            Microsoft.Office.Interop.Excel.Application ExcelApp = new Microsoft.Office.Interop.Excel.Application();
            ExcelApp.Application.Workbooks.Add(Type.Missing);
            ExcelApp.Columns.ColumnWidth = 20;
            ExcelApp.Cells[1, 1] = "№ Консультанта";
            ExcelApp.Cells[1, 2] = "Имя";
            ExcelApp.Cells[1, 3] = "Номер телефона";
            ExcelApp.Cells[1, 4] = "Адрес";
            ExcelApp.Cells[1, 5] = "Стаж";
            ExcelApp.Cells[1, 6] = "Характеристика";

            for (int i = 0; i < consultantDataGridView.ColumnCount; i++)
            {
                for (int j = 0; j < consultantDataGridView.RowCount; j++)
                {
                    ExcelApp.Cells[j + 2, i + 1] = (consultantDataGridView[i, j].Value ?? "").ToString();
                }
            }
            ExcelApp.Visible = true;
        }

        private void contractsToolStripMenuItem_Click(object sender, EventArgs e)
        {
           
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            
        }

        private void запросToolStripMenuItem_Click(object sender, EventArgs e)
        {
            sqlQuery_form = new SQL_QueryForm(this);
            if (sqlQuery_form.ShowDialog() == DialogResult.OK)
            {

            }
        }

        public void doSQLQuery(string query)
        {
            try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                SqlDataAdapter oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda = new SqlDataAdapter(query, sqlconn);
                oda.Fill(dt);
                if (query.Contains("Cars"))
                {
                    carDataGridView.DataSource = dt;
                }
                else if (query.Contains("Customers"))
                {
                    customerDataGridView.DataSource = dt;
                }
                else if (query.Contains("Consultants"))
                {
                    consultantDataGridView.DataSource = dt;
                }
                sqlconn.Close();
                
            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }

        }

        private void обновитьToolStripMenuItem_Click(object sender, EventArgs e)
        {
            /*try
            {
                SqlConnection sqlconn = new SqlConnection(ConnectionString);
                sqlconn.Open();
                string query = "SELECT * FROM Cars";
                SqlDataAdapter oda = new SqlDataAdapter(query, sqlconn);
                System.Data.DataTable dt = new System.Data.DataTable();
                oda = new SqlDataAdapter(query, sqlconn);
                oda.Fill(dt);
                carDataGridView.DataSource = dt;
                query = "SELECT * FROM Customers";
                System.Data.DataTable dt1 = new System.Data.DataTable();
                oda = new SqlDataAdapter(query, sqlconn);
                oda.Fill(dt1);
                customerDataGridView.DataSource = dt1;
                query = "SELECT * FROM Consultants";
                System.Data.DataTable dt2 = new System.Data.DataTable();
                oda = new SqlDataAdapter(query, sqlconn);
                oda.Fill(dt2);
                consultantDataGridView.DataSource = dt2;
                sqlconn.Close();

            }
            catch (Exception ex)
            {
                MessageBox.Show(@"Error: " + ex.Message);
            }*/
        }

        private void statisticsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ReportForm report = new ReportForm(array);
            report.Show();
        }

        private void createContract_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (contractsDataGridView.SelectedCells != null)
                {
                    int ind = contractsDataGridView.SelectedCells[0].RowIndex;
                    CreateContract(
                        (string)contractsDataGridView[0, ind].Value.ToString(),
                        (string)contractsDataGridView[1, ind].Value.ToString(),
                        (string)contractsDataGridView[2, ind].Value.ToString(),
                        (string)contractsDataGridView[3, ind].Value.ToString(),
                        (string)contractsDataGridView[4, ind].Value.ToString(),
                        (string)contractsDataGridView[5, ind].Value.ToString(),
                        (string)contractsDataGridView[6, ind].Value.ToString());
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void CreateContract(string contractId, string customerId, string carId, string consultantId, string notes, 
            string expiryDateLease, string dateDrawingContract) 
        {
            Microsoft.Office.Interop.Word.Application WordApp = new Microsoft.Office.Interop.Word.Application();

            object missing = System.Reflection.Missing.Value;
            Microsoft.Office.Interop.Word.Document document =
                    WordApp.Documents.Add(ref missing, ref missing, ref missing, ref missing);
            document.Content.SetRange(0, 0);
            StringBuilder contract = new StringBuilder();
            contract.Append("\t\t\t\t\t Контракт № ").Append(contractId).Append("\n");
            contract.Append("\tНастоящий контракт заключен между \"ОАО ХарьковАвтопрокат12345\" в лице генерального директора ");
            contract.Append("Минакова Артема Геннадиевича с одной стороны, и клиентом №").Append(customerId).Append(". ");
            contract.Append("Автопрокат обязуется предоставить клиенту автомобиль №").Append(carId);
            contract.Append(" на срок с ").Append(dateDrawingContract).Append(" по ").Append(expiryDateLease).Append("\n\n");
            contract.Append("Премечания \t").Append(notes).Append("\n\n");
            contract.Append("Консультант №").Append(consultantId);
            document.Content.Text =  contract.ToString() + Environment.NewLine;
            WordApp.Visible = true;
        }

        private void createContract1_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (contractsDataGridView1.SelectedCells != null)
                {
                    int ind = contractsDataGridView1.SelectedCells[0].RowIndex;
                    CreateContract(
                        (string)contractsDataGridView1[0, ind].Value.ToString(),
                        (string)contractsDataGridView1[1, ind].Value.ToString(),
                        (string)contractsDataGridView1[2, ind].Value.ToString(),
                        (string)contractsDataGridView1[3, ind].Value.ToString(),
                        (string)contractsDataGridView1[4, ind].Value.ToString(),
                        (string)contractsDataGridView1[5, ind].Value.ToString(),
                        (string)contractsDataGridView1[6, ind].Value.ToString());
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void createContract2_button_Click(object sender, EventArgs e)
        {
            try
            {
                if (contractsDataGridView2.SelectedCells != null)
                {
                    int ind = contractsDataGridView2.SelectedCells[0].RowIndex;
                    CreateContract(
                        (string)contractsDataGridView2[0, ind].Value.ToString(),
                        (string)contractsDataGridView2[1, ind].Value.ToString(),
                        (string)contractsDataGridView2[2, ind].Value.ToString(),
                        (string)contractsDataGridView2[3, ind].Value.ToString(),
                        (string)contractsDataGridView2[4, ind].Value.ToString(),
                        (string)contractsDataGridView2[5, ind].Value.ToString(),
                        (string)contractsDataGridView2[6, ind].Value.ToString());
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void CheckDateCustomerRights()
        {
            DateTime dateToday = DateTime.Today;
            DateTime dateRights;
            int count = customerDataGridView.Rows.Count;
            try
            {
                for (int i = 0; i < count - 1; i++)
                {
                    string data = customerDataGridView.Rows[i].Cells[5].Value.ToString();
                    dateRights = DateTime.Parse(data);
                    if (dateRights.Year < dateToday.Year)
                    {
                        try
                        {
                            customerDataGridView.Rows.RemoveAt(i);
                            MessageBox.Show("У клиента №" + carDataGridView.Rows[i].Cells[0].Value.ToString() + " истекли права");
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
                }
            }
            catch (Exception)
            {
            }
        }

        private void CheckCar()
        {
            int count = carDataGridView.Rows.Count;
            try
            {
                for (int i = 0; i < count - 1; i++)
                {
                    string mileage = carDataGridView.Rows[i].Cells[4].Value.ToString();
                    if (Convert.ToInt32(mileage) > 10000 )
                    {
                        try
                        {
                            MessageBox.Show("Необходим техосмотр автомобиля №" + carDataGridView.Rows[i].Cells[0].Value.ToString());
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                        }
                    }
                }
            }
            catch (Exception)
            {
            }
        }
        
    }
}
