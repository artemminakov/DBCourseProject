using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity; 

namespace DBCourseProject
{
    public partial class Form1 : Form
    {
        AddCar addCar_form;
        CarContext _context;
        public Form1()
        {
            InitializeComponent();
            addCar_form = new AddCar(this);
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            _context = new CarContext();

            // Call the Load method to get the data for the given DbSet  
            // from the database.  
            // The data is materialized as entities. The entities are managed by  
            // the DbContext instance.  
            _context.Cars.Load();
            _context.Customers.Load();
            _context.Consultants.Load();

            // Bind the categoryBindingSource.DataSource to  
            // all the Unchanged, Modified and Added Category objects that  
            // are currently tracked by the DbContext. 
            // Note that we need to call ToBindingList() on the  
            // ObservableCollection<TEntity> returned by 
            // the DbSet.Local property to get the BindingList<T> 
            // in order to facilitate two-way binding in WinForms. 
            this.carBindingSource.DataSource =
                _context.Cars.Local.ToBindingList();
            this.consultantBindingSource.DataSource =
                _context.Consultants.Local.ToBindingList();
            this.customerBindingSource.DataSource =
                _context.Customers.Local.ToBindingList();
            
        }

        private void categoryBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities  
            // that are removed from a navigation property (in our example the Products) 
            // as deleted in the context.  
            // The following code uses LINQ to Objects against the Local collection  
            // to find all products and marks any that do not have 
            // a Category reference as deleted.  
            // The ToList call is required because otherwise  
            // the collection will be modified  
            // by the Remove call while it is being enumerated.  
            // In most other situations you can do LINQ to Objects directly  
            // against the Local property without using ToList first. 
            foreach (var product in _context.Cars.Local.ToList())
            {
                if (product.Contracts == null)
                {
                    _context.Cars.Remove(product);
                }
            }

            // Save the changes to the database. 
            this._context.SaveChanges();

            // Refresh the controls to show the values          
            // that were generated by the database. 
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            this.Validate();
            this._context.SaveChanges();
            base.OnClosing(e);
            this._context.Dispose();
        }

        private void tabPage3_Click(object sender, EventArgs e)
        {

        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {

        }

        private void автомобильToolStripMenuItem_Click(object sender, EventArgs e)
        {      
            if (addCar_form.ShowDialog() == DialogResult.OK)
            {
                
            }
        }

        public void AddCarToDatagrid(string carName, string model, string color, int mileage, int rentalFees, int capacity)
        {
            int index = carDataGridView.Rows.Count - 1;
            string id = carDataGridView[0, index-1].Value.ToString();
            int idCar = Convert.ToInt32(id);
            carBindingSource.AddNew();
            carDataGridView.Rows.Add();
            carDataGridView[0, index].Value = idCar;
            carDataGridView[1, index].Value = carName;
            carDataGridView[2, index].Value = model;
            carDataGridView[3, index].Value = color;
            carDataGridView[4, index].Value = mileage;
            carDataGridView[5, index].Value = rentalFees;
            carDataGridView[6, index].Value = capacity;
            carDataGridView.Update();
        }

        
    }
}
